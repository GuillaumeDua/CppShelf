 *  Executing task: docker build --pull --rm -f ".devcontainer/Dockerfile" -t cppshelf:latest ".devcontainer" 

[+] Building 172.5s (12/15)                                                                                                                                                                                                          docker:default
 => [internal] load build definition from Dockerfile                                                                                                                                                                                           0.0s
 => => transferring dockerfile: 10.32kB                                                                                                                                                                                                        0.0s
 => [internal] load metadata for docker.io/library/ubuntu:latest                                                                                                                                                                               0.9s
 => [internal] load .dockerignore                                                                                                                                                                                                              0.0s
 => => transferring context: 2B                                                                                                                                                                                                                0.0s
 => [ 1/12] FROM docker.io/library/ubuntu:latest@sha256:77906da86b60585ce12215807090eb327e7386c8fafb5402369e421f44eff17e                                                                                                                       0.0s
 => CACHED [ 2/12] RUN apt update && apt install -y --no-install-recommends            ca-certificates gpg gpg-agent debian-keyring                software-properties-common lsb-release apt-utils            python3 pip                     0.0s
 => [ 3/12] RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null     && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(ls  21.0s
 => [ 4/12] RUN if [[  = "y" ]]; then                             apt install apt-transport-https curl gnupg -y                   && curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg           0.4s 
 => [ 5/12] RUN     wget -qO vcpkg.tar.gz https://github.com/microsoft/vcpkg/archive/master.tar.gz     && mkdir /opt/vcpkg     && tar xf vcpkg.tar.gz --strip-components=1 -C /opt/vcpkg     && /opt/vcpkg/bootstrap-vcpkg.sh     && ln -s /o  8.9s 
 => [ 6/12] RUN apt update -y && apt upgrade -y     && apt install -y         bash zsh     && yes '' | sh -c "$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"     && rm -rf /var/lib/apt/lists/*      25.7s 
 => [ 7/12] RUN apt update -y && apt-get install -y --no-install-recommends     libc6 libc6-dev libstdc++6 libc6-arm64-cross     binutils-aarch64-linux-gnu binutils-powerpc64-linux-gnu                                                      14.8s 
 => [ 8/12] RUN gcc_versions=${gcc_versions:=$(apt list --all-versions 2>/dev/null  | grep -oP '^gcc-\K([0-9]{2})' | sort -n | uniq)};         echo "[toolchain] Embedding gcc versions = [${gcc_versions}]";      echo gcc_versions='${gcc  100.3s 
 => ERROR [ 9/12] RUN apt install -y wget bash     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -     && wget https://apt.llvm.org/llvm.sh     && chmod +x llvm.sh     && llvm_versions=${llvm_versions:=$(cat   0.3s 
------                                                                                                                                                                                                                                              
 > [ 9/12] RUN apt install -y wget bash     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -     && wget https://apt.llvm.org/llvm.sh     && chmod +x llvm.sh     && llvm_versions=${llvm_versions:=$(cat llvm.sh | grep -oP 'LLVM_VERSION_PATTERNS\[(\d+)\]=\"\-\K(\d+)' | sort -n)}         echo "[toolchain] Embedding llvm versions = [${llvm_versions}]";        echo llvm_versions=\'${llvm_versions}\' >> /etc/bash.bashrc;            echo llvm_versions=\'${llvm_versions}\' >> /etc/zsh/zshrc;                  && (yes '' | ./llvm.sh $llvm_versions)     && echo $llvm_versions | tr " " "\n" | xargs -I {} sh -c '                  update-alternatives                                                                             --install /usr/bin/clang clang /usr/bin/clang-{} {}                                         --slave /usr/bin/clang++         clang++         /usr/bin/clang++-{}                        --slave /usr/bin/clang-format    clang-format    /usr/bin/clang-format-{}                   --slave /usr/bin/clang-tidy      clang-tidy      /usr/bin/clang-tidy-{}                     --slave /usr/bin/clangd          clangd          /usr/bin/clangd-{}                         --slave /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-{}                --slave /usr/bin/lldb            lldb            /usr/bin/lldb-{}                   ':
0.293 /bin/bash: -c: line 1: syntax error near unexpected token `&&'
0.293 /bin/bash: -c: line 1: `apt install -y wget bash     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -     && wget https://apt.llvm.org/llvm.sh     && chmod +x llvm.sh     && llvm_versions=${llvm_versions:=$(cat llvm.sh | grep -oP 'LLVM_VERSION_PATTERNS\[(\d+)\]=\"\-\K(\d+)' | sort -n)}         echo "[toolchain] Embedding llvm versions = [${llvm_versions}]";        echo llvm_versions=\'${llvm_versions}\' >> /etc/bash.bashrc;            echo llvm_versions=\'${llvm_versions}\' >> /etc/zsh/zshrc;                  && (yes '' | ./llvm.sh $llvm_versions)     && echo $llvm_versions | tr " " "\n" | xargs -I {} sh -c '                  update-alternatives                                                                             --install /usr/bin/clang clang /usr/bin/clang-{} {}                                         --slave /usr/bin/clang++         clang++         /usr/bin/clang++-{}                        --slave /usr/bin/clang-format    clang-format    /usr/bin/clang-format-{}                   --slave /usr/bin/clang-tidy      clang-tidy      /usr/bin/clang-tidy-{}                     --slave /usr/bin/clangd          clangd          /usr/bin/clangd-{}                         --slave /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-{}                --slave /usr/bin/lldb            lldb            /usr/bin/lldb-{}                   ''
------
Dockerfile:142
--------------------
 141 |     ARG llvm_versions=all
 142 | >>> RUN apt install -y wget bash \
 143 | >>>     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - \
 144 | >>>     && wget https://apt.llvm.org/llvm.sh \  
 145 | >>>     && chmod +x llvm.sh \
 146 | >>>     && llvm_versions=${llvm_versions:=$(cat llvm.sh | grep -oP 'LLVM_VERSION_PATTERNS\[(\d+)\]=\"\-\K(\d+)' | sort -n)} \
 147 | >>>     \
 148 | >>>     echo "[toolchain] Embedding llvm versions = [${llvm_versions}]";    \
 149 | >>>     echo llvm_versions=\'${llvm_versions}\' >> /etc/bash.bashrc;        \
 150 | >>>     # \'' fix coloration in vscode with docker extension ¯\_(ツ)_/¯
 151 | >>>     echo llvm_versions=\'${llvm_versions}\' >> /etc/zsh/zshrc;          \
 152 | >>>     # \'' fix coloration in vscode with docker extension ¯\_(ツ)_/¯
 153 | >>>     \
 154 | >>>     && (yes '' | ./llvm.sh $llvm_versions) \
 155 | >>>     && echo $llvm_versions | tr " " "\n" | xargs -I {} sh -c '          \
 156 | >>>         update-alternatives                                                                 \
 157 | >>>             --install /usr/bin/clang clang /usr/bin/clang-{} {}                             \
 158 | >>>             --slave /usr/bin/clang++         clang++         /usr/bin/clang++-{}            \
 159 | >>>             --slave /usr/bin/clang-format    clang-format    /usr/bin/clang-format-{}       \
 160 | >>>             --slave /usr/bin/clang-tidy      clang-tidy      /usr/bin/clang-tidy-{}         \
 161 | >>>             --slave /usr/bin/clangd          clangd          /usr/bin/clangd-{}             \
 162 | >>>             --slave /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-{}    \
 163 | >>>             --slave /usr/bin/lldb            lldb            /usr/bin/lldb-{}               \
 164 | >>>     '
 165 |     
--------------------
ERROR: failed to solve: process "/bin/bash -c apt install -y wget bash     && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -     && wget https://apt.llvm.org/llvm.sh     && chmod +x llvm.sh     && llvm_versions=${llvm_versions:=$(cat llvm.sh | grep -oP 'LLVM_VERSION_PATTERNS\\[(\\d+)\\]=\\\"\\-\\K(\\d+)' | sort -n)}         echo \"[toolchain] Embedding llvm versions = [${llvm_versions}]\";        echo llvm_versions=\\'${llvm_versions}\\' >> /etc/bash.bashrc;            echo llvm_versions=\\'${llvm_versions}\\' >> /etc/zsh/zshrc;                  && (yes '' | ./llvm.sh $llvm_versions)     && echo $llvm_versions | tr \" \" \"\\n\" | xargs -I {} sh -c '                  update-alternatives                                                                             --install /usr/bin/clang clang /usr/bin/clang-{} {}                                         --slave /usr/bin/clang++         clang++         /usr/bin/clang++-{}                        --slave /usr/bin/clang-format    clang-format    /usr/bin/clang-format-{}                   --slave /usr/bin/clang-tidy      clang-tidy      /usr/bin/clang-tidy-{}                     --slave /usr/bin/clangd          clangd          /usr/bin/clangd-{}                         --slave /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-{}                --slave /usr/bin/lldb            lldb            /usr/bin/lldb-{}                   '" did not complete successfully: exit code: 2

 *  The terminal process "/bin/bash '-c', 'docker build --pull --rm -f ".devcontainer/Dockerfile" -t cppshelf:latest ".devcontainer"'" terminated with exit code: 1. 
 *  Terminal will be reused by tasks, press any key to close it. 